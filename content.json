[{"title":"测试VS研发","date":"2018-04-01T01:27:26.000Z","path":"2018/04/01/测试VS研发/","excerpt":"测试与研发总是在互相吐槽的同时又保持着亲密的合作。 导读：很多行业，譬如软件研发、机械制造、餐饮等等，都是有自己行业相关的测试标准以及配套的研发、测试部门的。研发负责一个产品从无到有的设计生产，测试则把控着产品质量的生命线。而对于程序员来说，测试与研发之间经常会有互黑吐槽与亲密合作，一个合格的产品总是在这个过程中诞生的。","categories":[],"tags":[{"name":"经验","slug":"经验","permalink":"http://www.yellowmax2001.com/tags/经验/"},{"name":"感悟","slug":"感悟","permalink":"http://www.yellowmax2001.com/tags/感悟/"}]},{"title":"生活集思录-大学门外的事情","date":"2018-03-25T01:53:02.000Z","path":"2018/03/25/生活集思录-大学门外的事情/","excerpt":"学习在某个方面相对来说应该是世界上最纯粹的事情了。 目前还处于是职场小白阶段，经过一段时间的忙碌，也逐渐感觉到了毕业之后的生活应该是什么样的？试用期的过渡说实话还是比较合理的，从最开始感觉和学校里面的生活好像没什么两样，到后来慢慢地显现出来细微的差异，再到逐渐切换到另一条轨道上面（对于毕业前与毕业之后的路，我觉得很像是通往同一个目的地的两条不一样的轨道）。","categories":[],"tags":[{"name":"经验","slug":"经验","permalink":"http://www.yellowmax2001.com/tags/经验/"},{"name":"感悟","slug":"感悟","permalink":"http://www.yellowmax2001.com/tags/感悟/"}]},{"title":"OpenMAX编程-音视频等组件介绍","date":"2017-12-03T12:13:16.000Z","path":"2017/12/03/OpenMAX编程-音视频等组件介绍/","excerpt":"往期文章索引：03 - OpenMAX编程-实现一个组件02 - OpenMAX编程-数据结构01 - OpenMAX编程-组件00 - OpenMAX编程初识 导读：本文着重介绍不同类型组件的具体构成（参数类型、特性设置等），包括audio、video、image等组件。另外对OpenMAX的一些扩展用法以及以前文章当中的缺漏进行补充。","categories":[],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://www.yellowmax2001.com/tags/C语言/"},{"name":"编程","slug":"编程","permalink":"http://www.yellowmax2001.com/tags/编程/"},{"name":"OpenMAX","slug":"OpenMAX","permalink":"http://www.yellowmax2001.com/tags/OpenMAX/"}]},{"title":"OpenMAX编程-实现一个组件","date":"2017-12-03T12:13:16.000Z","path":"2017/12/03/OpenMAX编程-实现一个组件/","excerpt":"往期文章索引：02 - OpenMAX编程-数据结构01 - OpenMAX编程-组件00 - OpenMAX编程初识 导读：本文聚焦于如何编程实现一个真正的组件，主题思想是介绍一个组件在编程sjo的模块组成以及如何编写，也会介绍下组件的初始化过程、组件之间的绑定过程、数据同步过程。在下一篇文章里面会对video、audio、clock等组件进行介绍。 注意：该文章主要介绍组件内部代码的实现，其余部分简略介绍，实际上完整的组件还包括有组件类型的管理，组件绑定模块，组件句柄的分配，然后才是下面的各个组件的实现，但是OpenMAX的标准化使得我们编写组件内部代码的时候不必过于关心更上层的组件管理代码的实现，只需要知道应该按照什么样的规则去编写组件内部代码即可。","categories":[],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://www.yellowmax2001.com/tags/C语言/"},{"name":"编程","slug":"编程","permalink":"http://www.yellowmax2001.com/tags/编程/"},{"name":"OpenMAX","slug":"OpenMAX","permalink":"http://www.yellowmax2001.com/tags/OpenMAX/"}]},{"title":"memset对memcpy耗费时间的影响","date":"2017-11-21T14:05:24.000Z","path":"2017/11/21/malloc-memset-memcpy之探索/","excerpt":"前言：源于之前几天的一个测试程序，作用是用来测试某个系统的内存访问能力，主体测试策略是分配一个缓冲区，然后使用memcpy在分配的缓冲区之间拷贝若干次，计算拷贝时间，然后在多线程的环境下运行多个拷贝程序，再次分别计算每个线程花费的时间，以此来估算系统的内存访问能力、线程调度性能以及带宽分配性能。然而，测试过程中却发生了很多问题，从而也引发了不少的思考，下面细细道来。","categories":[],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://www.yellowmax2001.com/tags/C语言/"},{"name":"编程","slug":"编程","permalink":"http://www.yellowmax2001.com/tags/编程/"}]},{"title":"2017嵌入式软件行业现状及概述","date":"2017-10-28T00:36:51.000Z","path":"2017/10/28/2017嵌入式软件行业现状及概述/","excerpt":"导读：本文章介绍了截止2017年为止的嵌入式软件行业现状，包括就业方向，行业产品类型，待遇等等。另外还简单概述了下嵌入式软件所需的知识技能以及未来可能的技能发展走向。本文章远不如专业的行业报告一般精准、专业，仅仅是根据个人见闻来提供一个比较整体的嵌入式软件行业印象，抛砖引玉，以供参考。（文末有2017年集成电路行业薪资表哦）。","categories":[],"tags":[{"name":"经验","slug":"经验","permalink":"http://www.yellowmax2001.com/tags/经验/"},{"name":"感悟","slug":"感悟","permalink":"http://www.yellowmax2001.com/tags/感悟/"}]},{"title":"OpenMAX编程-数据结构","date":"2017-10-22T13:52:04.000Z","path":"2017/10/22/OpwnMAX编程-数据结构/","excerpt":"往期文章索引：01 - OpenMAX编程-组件00 - OpenMAX编程初识 导读该篇文章对OpenMAX的数据结构进行概要描述，包括OpenMAX的一些官方定义的头文件介绍，以及各种结构体数据介绍：比如OpenMAX组件结构体描述、PORT端口结构体描述。并对组件内部线程的大概结构以及组织方式进行介绍，本文章的目标是可以实现一个有基本功能的组件。 该文章中提到的IL Client可以看作是组件的使用者，负责组件的创建、销毁、命令控制等等。注意本文章需要结合例程代码去看，否则会觉得本文不知所云。代码参考OpenMAX编程-组件一文中的OpenMAX IL sample下载链接","categories":[],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://www.yellowmax2001.com/tags/C语言/"},{"name":"编程","slug":"编程","permalink":"http://www.yellowmax2001.com/tags/编程/"},{"name":"OpenMAX","slug":"OpenMAX","permalink":"http://www.yellowmax2001.com/tags/OpenMAX/"}]},{"title":"生活集思录-入职三个月的迷茫","date":"2017-10-22T01:29:22.000Z","path":"2017/10/22/生活集思录-入职三个月的迷茫/","excerpt":"生而为人，问题很多。 我从小学到大学乃至到毕业工作，每到一个新的环境中，总归会有一段迷茫的时期，或是对目标的迷茫，或是对人际关系的迷茫，又或是对前途归属的迷茫。其实在初中高中的时候，这种现象并不是很突出，大概是因为初中高中都有一个明确的目标以及计划，初中的时候会想着要考一个好的高中，等到了高中会想着要考一个好的大学，目标极其清晰，并且计划也非常明确，整个可供选择的余地并不大。但是这之后，情况就不太一样了。","categories":[],"tags":[{"name":"经验","slug":"经验","permalink":"http://www.yellowmax2001.com/tags/经验/"},{"name":"感悟","slug":"感悟","permalink":"http://www.yellowmax2001.com/tags/感悟/"}]},{"title":"OpenMAX编程-组件","date":"2017-10-09T14:01:52.000Z","path":"2017/10/09/OpenMAX编程-组件/","excerpt":"OpenMAX的重点组成部分就是组件，OpenMAX通过将meida流过程中的各个模块抽象化为组件来进行耦合，在OpenMAX标准下，数据流通过组件来进行传递、处理、显示。在该篇文章里，不需要了解细致的组件内部实现机理，也不需要知道各种方法的代码实现形式（如遇少量代码形式的解析说明可暂时略过，只需要知道该段代码要完成的工作是什么即可），通过阅读该文章，需要知道的是组件是什么？它有什么用处？内部的主要组成结构是怎样的？更加细节性的介绍放到后面的文章里面介绍。 OpenMAX IL spec手册下载：https://www.khronos.org/files/openmax_il_spec_1_0.pdf OpenMAX IL sample下载：https://www.khronos.org/files/openmax/sample_implementation/OMX_CONF_MyComponent_Alt.c OpenMAX IL 头文件下载：https://www.khronos.org/files/openmax/headers/omx_il_v1/omx_il_v1.zip","categories":[],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://www.yellowmax2001.com/tags/C语言/"},{"name":"编程","slug":"编程","permalink":"http://www.yellowmax2001.com/tags/编程/"},{"name":"OpenMAX","slug":"OpenMAX","permalink":"http://www.yellowmax2001.com/tags/OpenMAX/"}]},{"title":"OpenMAX编程初识","date":"2017-09-19T13:35:57.000Z","path":"2017/09/19/OpenMAX编程初识/","excerpt":"导读： 本篇文章对OpenMAX做了一个整体的介绍与概述，说明OpenMAX是什么？可以解决什么问题？用在什么地方？以及为什么要用OpenMAX？这里并不对OpenMAX进行深入介绍（放到接下来的几篇文章里面），希望通过这篇文章可以对OpenMAX有一个大体的了解。 什么是OpenMAX OpenMAX：open media acceleration.直译为开放多媒体加速器，可以理解为是一个拥有免费使用权的多媒体加速器。OpenMAX是Khronos Group开发制定的，该标准采用C语言实现，这个小组是由3Dlabs、ATI、Intel、Nvidia等行业大佬联合创建，目的是实现跨平台的免费的多媒体加速、回放。","categories":[],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://www.yellowmax2001.com/tags/C语言/"},{"name":"编程","slug":"编程","permalink":"http://www.yellowmax2001.com/tags/编程/"},{"name":"OpenMAX","slug":"OpenMAX","permalink":"http://www.yellowmax2001.com/tags/OpenMAX/"}]},{"title":"C语言之list_head双向链表","date":"2017-09-13T14:06:37.000Z","path":"2017/09/13/C语言之list_head双向链表/","excerpt":"对于嵌入式开发者来说，双向链表是用的非常多的一种数据结构之一，在linux内核里面有一个叫做list_head的结构体，专门用来做双向链表的种种操作，掌握并理解双向链表以及list_head的实现方式对于嵌入式开发来说是非常有帮助的。","categories":[],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://www.yellowmax2001.com/tags/C语言/"},{"name":"编程","slug":"编程","permalink":"http://www.yellowmax2001.com/tags/编程/"}]},{"title":"C指针深度剖析","date":"2017-09-10T12:36:36.000Z","path":"2017/09/10/C指针深度剖析/","excerpt":"该文章详解了C语言中指针的概念与用法，对初学者了解C语言中指针这一重要概念有很大的帮助，其中变量的定义与使用一节尤为有价值。要点如下： 指针是个变量，本质代表了一个地址。 变量拆解遵循由近到远，从左到右的原则。 C语言中，变量怎么使用就怎么定义（指的是书写格式上保持一致）。 指针简述 在C语言中，指针就是一个地址，不管是什么类型的指针，它都代表了一个地址，指针本身的值是一个整形的数（长度跟系统和硬件有关，这里认为指针长度是32位）。 不同的指针类型代表着什么？指针的类型是对于指针指向的内容来说的，比如char类型的指针代表其指向的地址内容是char类型的，指定类型是为了在取数据的时候知道取多少个字节。比如一个指针名为ptr，假设指向0xFFFF0000，如下图所示：","categories":[],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://www.yellowmax2001.com/tags/C语言/"},{"name":"编程","slug":"编程","permalink":"http://www.yellowmax2001.com/tags/编程/"}]},{"title":"嵌入式面试全攻略，记我的一次校招","date":"2017-08-29T13:46:47.000Z","path":"2017/08/29/嵌入式面试全攻略，记我的一次校招/","excerpt":"写在前面：说实话，面了这么多家公司，觉得校招最注重的还是基础能力与理论。对于嵌入式Linux开发类职位来说，最重要的是C语言基本功底，对C语言要了解的十分透彻，比如C语言的面向对象编程，怎么用C语言去实现面向对象类高级语言的继承、多态、封装。达到熟练掌握数据结构，尤其是链表。对于指针不能仅停留在取址、加减运算这基本印象上，至少要达到知道指针与数组名的区别，知道char、int等指针类型的区别以及它们的相互转换方法，知道函数指针与指针函数的使用以及区别等等。在学习过程中要找准自己的方向，不要去过度追求各种金光闪闪的框架以及语言的奇淫技巧，学习过程中要注重各个知识背后的原理，而不是仅仅会用。 校招的优点（相对社招） 对应聘者的专业实践技能要求不是很高，更多看重理论基础 大公司校招很多，是进入到大公司工作的好途径 公司经过学校进行一轮初级筛选，会主动为应聘者避开一些坑人的公司 地点集中，都是公司去学校招聘，不必满世界跑来跑去，节省时间财力","categories":[],"tags":[{"name":"经验","slug":"经验","permalink":"http://www.yellowmax2001.com/tags/经验/"},{"name":"感悟","slug":"感悟","permalink":"http://www.yellowmax2001.com/tags/感悟/"}]},{"title":"新的开始，与大学告别","date":"2017-08-21T14:00:25.000Z","path":"2017/08/21/新的开始，与大学告别/","excerpt":"四年的大学生活很快便过去了，想想仍然有很多的遗憾，其中最为追悔的就是目标的确立与学习方法的选择。在大学里面没有及时的形成正确的大学观念以及人生观念，这导致我有很多时候选错了方向，弄错了方法，造成了不可追回的时间浪费。如果我的大学要用一句话来总结，那便是：努力尚可，慵懒有余。 不知道如何提高自制力的同学可以看下学习观念的转换一节，放心，不会长篇大论空泛的道理，而是给出了一个切实可行的操作步骤，按照1~4步去做即可验证该方法是否有用。 前言&emsp;&emsp;这篇文章有自己大学四年来积累的一些对大学以及一些很大一部分人都有的疑问的一些自己的看法，也有对自己大学四年来的一些总结与感悟。对于有些问题的答案，不保证符合每个人的观点，但保证每一个都是个人实践得来的结果，希望对读者有所帮助，甚或能够及时纠正一些错误的看法，那就再好不过。（后面有干货，对于一些观点，我会尽量举出例子来说明，以免文章落入空泛不实的境地）","categories":[],"tags":[{"name":"经验","slug":"经验","permalink":"http://www.yellowmax2001.com/tags/经验/"},{"name":"感悟","slug":"感悟","permalink":"http://www.yellowmax2001.com/tags/感悟/"}]},{"title":"hexo博客深度使用","date":"2017-08-08T14:55:00.000Z","path":"2017/08/08/hexo深度使用/","excerpt":"写在前面：由于如何搭建hexo博客网上已经有了非常多的详细教程，这里就不再详述安装过程，只针对遇到的问题以及较为进阶的使用方法。该文章简介了hexo的安装，重点介绍了如何集成自己想要的主题到hexo里面，并且介绍了一个完整的博客发布流程解决方案。 hexo的安装（windows） 材料 git-for-windows：http://download.csdn.net/download/u013904227/9923305 node.js：https://nodejs.org/en/download/ hexo：https://hexo.io/ 安装hexo在git-for-windows上面运行下面的语句（git-for-windows版本要高于2.12） 12345npm install hexo-cli -g #使用全局设置下载、安装hexo至默认的文件夹hexo init blog #在当前文件夹下初始化一个blog项目，从远程git仓库拷贝cd blog #进入blognpm install #安装指定模块，package.json指定hexo server #这一步是在本地启动一个http服务 在linux上面需要安装需要根据自己的系统去网上找到教程，有的系统如ubuntu使用apt-get进行包管理，有的如centOS使用yum进行管理（根据相应的系统可以选择使用apt-get或者yum进行下载）。也可以直接下载相应工具的二进制代码包，直接解压即可运行。甚或有会折腾的老鸟可以去下载源码包自行编译安装。","categories":[],"tags":[{"name":"web","slug":"web","permalink":"http://www.yellowmax2001.com/tags/web/"},{"name":"hexo 博客配置","slug":"hexo-博客配置","permalink":"http://www.yellowmax2001.com/tags/hexo-博客配置/"}]}]